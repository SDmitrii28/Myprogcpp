#pragma once
#include "BoolVector.h"
#include <iostream>
using namespace std;

class BoolMatrix
{
	BoolVector* BM;
	int m, n; 		//m -- кол-во булевых векторов, т.е кол-во строк матрицы
					   //n -- длина булева вектора, т.е. кол-во столбцов
	int Max(char** s, int m);

public:
	BoolMatrix();
	BoolMatrix(int, int);
	BoolMatrix(char**, int);
	BoolMatrix(const BoolMatrix&);
	~BoolMatrix();
	BoolMatrix& operator=(const BoolMatrix&);

	void Scan(int, int);
	void Print();

	BoolVector& operator[] (int);
	bool operator== (BoolMatrix&); //можно аргумент взять BoolMatrix
	bool operator!= (BoolMatrix&);

	BoolMatrix SetUp1(int i, int j);
	//установить 1 в i-й строке, j-м столбце
	BoolMatrix SetUp0(int i, int j);
	//установить 0 (сбросить в 0) в i-й строке, j-м столбце
	BoolMatrix Invert(int i, int j);
	//инвертировать эл-т в i-й строке, j-м столбце

	BoolMatrix SetUp1(int i, int j, int kol);
	//установить kol эл-тов в i-й строке, j-м столбце
	BoolMatrix SetUp0(int i, int j, int kol);
	//сбросить kol эл-тов в i-й строке, j-м столбце
	BoolMatrix Invert(int i, int j, int kol);
	//инвертировать kol эл-тов в i-й строке, j-м столбце

	BoolMatrix ShiftLeft(int, int);
	//сдвиг влево эл-тов i-й строки на k, создается новая
	BoolMatrix& ShiftLeftEq(int, int);
	//сдвиг влево эл-тов i-й строки на k, изменяется *this

	BoolMatrix ShiftRight(int, int);
	//сдвиг вправо эл-тов i-й строки на k, создается новая
	BoolMatrix& ShiftRightEq(int, int);
	//сдвиг вправо эл-тов i-й строки на k, изменяется *this

	BoolMatrix operator~();  //инверсия всей матрицы

	BoolMatrix operator & (BoolMatrix&);
	//построчная конъюнкция 2-х матриц, создается новая
	BoolMatrix& operator &= (BoolMatrix&);
	//построчная конъюнкция 2-х матриц, изменяется *this

	BoolMatrix operator | (BoolMatrix&);
	//построчная дизъюнкция 2-х матриц, создается новая
	BoolMatrix& operator |= (BoolMatrix&);
	//построчная дизъюнкция 2-х матриц, изменяется *this

	BoolMatrix operator ^ (BoolMatrix&);
	//построчная XOR 2-х матриц, создается новая
	BoolMatrix& operator ^= (BoolMatrix&);
	//построчная XOR 2-х матриц, изменяется *this

	BoolVector Conj();  //конъюнкция всех строк матрицы
	BoolVector Disj();  //дизъюнкция всех строк матрицы
	BoolVector Xor();  //XOR всех строк матрицы

	friend ostream& operator<<(ostream& r, BoolMatrix& X);
	friend istream& operator>>(istream& r, BoolMatrix& X);

	BoolMatrix& SetNeven(int);
	BoolMatrix& InventEven(int);

};

int BoolMatrix::Max(char** s, int m)
{
	int i, max;
	max = strlen(s[0]);
	for (i = 0; i < m; i++)
		if (max < strlen(s[i]))
			max = strlen(s[i]);
	return max;
}

BoolMatrix::BoolMatrix()
{
	m = 1; n = 1;
	BM = new BoolVector[m];
	BoolVector B(1);
	BM[0] = B;
	//BM[0]=BoolVector(1);
}

BoolMatrix::BoolMatrix(int M, int N)
{
	m = M; n = N;
	BM = new BoolVector[m];
	for (int i = 0; i < m; i++)
		BM[i] = BoolVector(n);
	//второй вариант:
	//BoolVector B(n);
	//for(int i=0; i<m; i++)
	//	      BM[i]=B;
}


BoolMatrix::BoolMatrix(char** s, int M)
{
	m = M;
	n = Max(s, M);
	BM = new BoolVector[m];
	for (int i = 0; i < m; i++)
		BM[i] = BoolVector(s[i], n);
}


BoolMatrix::BoolMatrix(const BoolMatrix& X)
{
	m = X.m; n = X.n;
	BM = new BoolVector[m];
	for (int i = 0; i < m; i++)
	{
		BM[i] = X.BM[i];
	}
}

BoolMatrix::~BoolMatrix()
{
	delete[]BM;
}
BoolMatrix& BoolMatrix::operator=(const BoolMatrix& X)
{
	if (this != &X)
	{
		delete[] BM;
		m = X.m;
		n = X.n;
		BM = new BoolVector[m];
		for (int i = 0; i < m; i++)
		{
			BM[i] = X.BM[i];
		}
	}
	return *this;
}
void BoolMatrix::Scan(int M, int N)
{
	if (m != M || n != N)
	{
		delete[]BM;
		n = N; m = M;
		BM = new BoolVector[m];
	}
	cout << "enter Boolean Matrix size of " << m << 'x' << n << ':' << endl;
	for (int i = 0; i < m; i++)
		BM[i].Scan(n);
}
void BoolMatrix::Print() {
	for (int i = 0; i < m; i++) {
		BM[i].Print();
		cout << endl;
	}
}
istream& operator>>(istream& r, BoolMatrix& X)
{
	cout << "enter the number of rows and columns:";
	int M, N;
	cin >> M >> N;
	//Очистка потока ввода. Несколько вариантов:
	while (getchar() != '\n');
	//или while(getchar()!='\n') continue;
	//второй вариант: while(cin.get())!='\n');  
	//	      	      или  while(cin.get())!='\n') continue;
	//третий вариант: char s[10]; sets_s(s,10);
	X.Scan(M, N);
	return r;
}
ostream& operator<<(ostream& r, BoolMatrix& X) {
	X.Print();
	return r;
}
BoolVector& BoolMatrix::operator[] (int i)
{
	try
	{
		if (i < 0) throw 0;
		if (i >= m) throw "index >= m";
		return BM[i];
	}
	catch (int i)
	{
		cout << "index < 0" << endl;
		return BM[0];
	}
	catch (char* s)
	{
		cout << s << endl;
		return BM[m - 1];
	}
	catch (...)
	{
		cout << "incorrect index" << endl;
		exit(-1);
	}
}

bool BoolMatrix:: operator ==(BoolMatrix& x)
{
	if (m != x.m || n != x.n)
	{
		return false;
	}
	for (int i = 0; i < m; i++)
	{
		if (BM[i] != x.BM[i])
		{
			return false;
		}
	}
	return true;
}

bool BoolMatrix:: operator !=(BoolMatrix& x)
{
	if (m != x.m || n != x.n)
	{
		return true;
	}
	for (int i = 0; i < m; i++)
	{
		if (BM[i] != x.BM[i])
		{
			return true;
		}
	}
	return false;
}
//установить kol эл-тов в i-й строке, j-м столбце (cтолбцы считаются справа налево)
BoolMatrix BoolMatrix::SetUp1(int i, int j)
{
	if (i < 0 || i >= m)
	{
		cout << "incorrect index i" << endl;
		return *this;
	}
	else
		if (j < 0 || j >= n)
		{
			cout << "incorrect index j" << endl;
			return *this;
		}
		else
		{
			BM[i].SetUp1(j);
			//если столбцы матрицы нумеруются слева направо, то
			//BM[i].SetUp1(n-1-j);
			return *this;
		}
}

BoolMatrix BoolMatrix::SetUp0(int i, int j)
{
	if (i < 0 || i >= m)
	{
		cout << "incorrect index i" << endl;
		return *this;
	}
	else
		if (j < 0 || j >= n)
		{
			cout << "incorrect index j" << endl;
			return *this;
		}
		else
		{
			BM[i].SetUp0(j);
			//если столбцы матрицы нумеруются слева направо, то
			//BM[i].SetUp1(n-1-j);
			return *this;
		}
}

BoolMatrix BoolMatrix::Invert(int i, int j)
{
	if (i < 0 || i >= m)
	{
		cout << "incorrect index i" << endl;
		return *this;
	}
	else
		if (j < 0 || j >= n)
		{
			cout << "incorrect index j" << endl;
			return *this;
		}
		else
		{
			BM[i].Invert(j);
			//если столбцы матрицы нумеруются слева направо, то
			//BM[i].SetUp1(n-1-j);
			return *this;
		}
}

BoolMatrix BoolMatrix::SetUp1(int i, int j, int kol)
{
	if (i < 0 || i >= m)
	{
		cout << "incorrect index i" << endl;
		return *this;
	}
	else
		if (j < 0 || j >= n)
		{
			cout << "incorrect index j" << endl;
			return *this;
		}
		else
		{
			BM[i].SetUp1(kol, j);
			//если столбцы матрицы нумеруются слева направо, то
			//BM[i].SetUp1(n-1-j);
			return *this;
		}
}

BoolMatrix BoolMatrix::SetUp0(int i, int j, int kol)
{
	if (i < 0 || i >= m)
	{
		cout << "incorrect index i" << endl;
		return *this;
	}
	else
		if (j < 0 || j >= n)
		{
			cout << "incorrect index j" << endl;
			return *this;
		}
		else
		{
			BM[i].SetUp0(kol, j);
			//если столбцы матрицы нумеруются слева направо, то
			//BM[i].SetUp1(n-1-j);
			return *this;
		}
}

BoolMatrix BoolMatrix::Invert(int i, int j, int kol)
{
	if (i < 0 || i >= m)
	{
		cout << "incorrect index i" << endl;
		return *this;
	}
	else
		if (j < 0 || j >= n)
		{
			cout << "incorrect index j" << endl;
			return *this;
		}
		else
		{
			BM[i].Invert(kol, j);
			//если столбцы матрицы нумеруются слева направо, то
			//BM[i].SetUp1(n-1-j);
			return *this;
		}
}
BoolMatrix BoolMatrix::operator~() {
	for (int i = 0; i < m; i++) {
		BM[i] = ~BM[i];
	}
	return *this;
}
//построчная конъюнкция 2-х матриц, создается новая
BoolMatrix BoolMatrix::operator & (BoolMatrix& X)
{
	BoolMatrix Res(m, n);
	if (m != X.m || n != X.n)
	{
		cout << "incorrect dimension" << endl;
		Res = *this;
	}
	else for (int i = 0; i < m; i++)
		Res.BM[i] = BM[i] & X.BM[i];
	return Res;
}

//построчная конъюнкция 2-х матриц, изменяется *this
BoolMatrix& BoolMatrix::operator &= (BoolMatrix& X)
{
	BoolMatrix Res = (*this) & X;
	(*this) = Res;
	return *this;
}

//построчная дизъюнкция 2-х матриц, создается новая
BoolMatrix BoolMatrix::operator | (BoolMatrix& X)
{
	BoolMatrix Res(m, n);
	if (m != X.m || n != X.n)
	{
		cout << "incorrect dimension" << endl;
		Res = *this;
	}
	else for (int i = 0; i < m; i++)
		Res.BM[i] = BM[i] | X.BM[i];
	return Res;
}

//построчная дизъюнкция 2-х матриц, изменяется *this
BoolMatrix& BoolMatrix::operator |= (BoolMatrix& X)
{
	BoolMatrix Res = (*this) | X;
	(*this) = Res;
	return *this;
}
//построчная XOR 2-х матриц, создается новая
BoolMatrix BoolMatrix::operator ^ (BoolMatrix& X)
{
	BoolMatrix Res(m, n);
	if (m != X.m || n != X.n)
	{
		cout << "incorrect dimension" << endl;
		Res = *this;
	}
	else for (int i = 0; i < m; i++)
		Res.BM[i] = BM[i] ^ X.BM[i];
	return Res;
}

//построчная XOR 2-х матриц, изменяется *this
BoolMatrix& BoolMatrix::operator ^= (BoolMatrix& X)
{
	BoolMatrix Res = (*this) ^ X;
	(*this) = Res;
	return *this;
}
//сдвиг влево эл-тов i-й строки на k, создается новая
BoolMatrix BoolMatrix::ShiftLeft(int i, int k)
{
	BoolMatrix Res = (*this);
	Res.BM[i] <<= k;
	return Res;
}

//сдвиг влево эл-тов i-й строки на k, изменяется *this
BoolMatrix& BoolMatrix::ShiftLeftEq(int i, int k)
{
	BM[i] <<= k;
	return *this;
}
//сдвиг вправо эл-тов i-й строки на k, создается новая
BoolMatrix BoolMatrix::ShiftRight(int i, int k)
{
	BoolMatrix Res = (*this);
	Res.BM[i] >>= k;
	return Res;
}

//сдвиг вправо эл-тов i-й строки на k, изменяется *this
BoolMatrix& BoolMatrix::ShiftRightEq(int i, int k)
{
	BM[i] >>= k;
	return *this;
}


BoolVector BoolMatrix::Conj() //конъюнкция всех строк матрицы
{
	BoolVector Res = BM[0];
	for (int i = 1; i < m; i++)
		Res &= BM[i];
	return Res;
}
BoolVector BoolMatrix::Disj() //дизъюнкция всех строк матрицы
{
	BoolVector Res = BM[0];
	for (int i = 1; i < m; i++)
		Res |= BM[i];
	return Res;
}
BoolVector BoolMatrix::Xor() //XOR всех строк матрицы
{
	BoolVector Res = BM[0];
	for (int i = 1; i < m; i++)
		Res ^= BM[i];
	return Res;
}
BoolMatrix& BoolMatrix::SetNeven(int i) {
	for (int j = 0; j < n; j++) {
		if (j % 2 == 1) {
			SetUp1(i, j);
		}
	}
	return *this;
}
BoolMatrix& BoolMatrix::InventEven(int i) {
	for (int j = 0; j < n; j++) {
		if (j % 2 == 0) {
			Invert(i, j);
		}
	}
	return *this;
}



