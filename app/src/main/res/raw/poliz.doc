#include <iostream>
#include <cmath>
#include <conio.h>
#include <cstring>
using namespace std;
struct Node
{
	int key;
	Node* next;
};
struct Stack {
	Node* head;
	Stack() {
		head = 0;
	}
	~Stack() {
		Clear();
	}
	void push(int k)
	{
		Node* p = new Node;
		p->key = k;
		p->next = head;
		head = p;
	}
	int pop() {
		int k = head->key;
		Node* p = head;
		head = head->next;
		delete p;
		return k;
	}

	int top(){
		return head->key;
	}
	bool empty() {
		if (head == 0)
			return true;
		return false;
	}
	void Clear() {
		int k;
		while (head)
			k = pop();
	}
	void output() {
		Node* p;
		for (p = head; p != 0; p = p->next)
			cout << char(p->key);
		cout << " " ;
	}
};
bool Digit(char ch) {
	if ('0' <= ch && ch <= '9')
		return true;
	return false;
}
bool Digit1(char ch) {
	if ('a' <= ch && ch <= 'z')
		return true;
	return false;
}
int Proiritet(char s) {
	switch (s) {
	case '(': return 0;
	case '+': return 1;
	case '-': return 1;
	case '*': return 2;
	case '/': return 2;
	}
}
int addstackint(char* s, Stack* p, int i, int j) 
{
	int k, z;
	int n = strlen(s);
	k=0;
	bool f = true;
	while (f!=false && (i+k)<=n) 
	{
		if (Digit(s[i + k])) 
		{
			p[j].push(s[i + k]);
				k++;
				f=true;
		}
		else
			f=false;
	}
	z = i + k;
	return z;
}
int addstackchar(char* s, Stack* p, int i, int j)
{
	int k, z;
	int n = strlen(s);
	k = 0;
	bool f = true;
	while (f != false && (i + k) <= n)
	{
		if (Digit1(s[i + k]))
		{
			p[j].push(s[i + k]);
			k++;
			f = true;
		}
	else
		f = false;
	}
	z = i + k;
	return z;
}
int FormPOLIZ(char* s, Stack* p)
{
	char ch;
	Stack Znak, Prior;
	int i, j, t, r, r1, w;
	for (i = j = 0; s[i]; i++)
	{
		if (Digit1(s[i])) {
			r1 = addstackchar(s, p, i, j);
			j++;
			i = r1 - 1;
		}
		else
			if (Digit(s[i])) {
				r = addstackint(s, p, i, j);
				j++;
				i = r - 1;
			}
			else
				if (Znak.empty() || s[i] == '(')
				{
					Znak.push(s[i]);
					Prior.push(Proiritet(s[i]));
				}
				else
					if (s[i] == ')')
					{
						while (Znak.top() != '(')
						{
							p[j].push(Znak.pop());
							t = Prior.pop();
							j++;
						}
						ch = Znak.pop();
						t = Prior.pop();
					}
					else
						if (Prior.top() < Proiritet(s[i]))
						{
							Znak.push(s[i]);
							Prior.push(Proiritet(s[i]));
						}
						else
						{
							while (!Znak.empty() && Prior.top() >= Proiritet(s[i]))
							{
								p[j].push(Znak.pop());
								t = Prior.pop();
								j++;
							}
							Znak.push(s[i]);
							Prior.push(Proiritet(s[i]));
						}
	}
	while (!Znak.empty())
	{
		p[j].push(Znak.pop());
		t = Prior.pop();
		j++;
	}
	//p[j] = '\0';
	return j;
}
void printPOLIZ(Stack* p, Stack* z, int n) {
	for (int i = 0; i < n; i++) {
		while (!p[i].empty())
		{
			z[i].push(p[i].pop());
		}
	}
	for (int j = 0; j < n; j++) {
		z[j].output();
	}
}
int chislo(Stack* p, int j, int n) {
	int x = 0;
	int q = 1;
	while (!p[j].empty())
	{
		x += ((p[j].pop() - '0') * q);
		q *= 10;
	}
	return x;
}
void invert(Stack* z, Stack* w, int n)
{
	for (int i = 0; i < n; i++)
	{
		while (!z[i].empty())
		{
			w[i].push(z[i].pop());
		}
	}

}
int chislochar(Stack* w, int j, int n) 
{
	int a = 1;
	int x = 0;
	int z;
	if (w[j].top() > 96 && w[j].top() < 100)
	{
		x += (w[j].pop() * a);
		a *= 100;
	}
	else
		if (w[j].top() > 99 && w[j].top() < 123)
		{
			x += (w[j].pop() * a);
			a *= 1000;
		}
	while (!w[j].empty()) 
	{
		if (w[j].top() > 96 && w[j].top() < 100)
		{
			x += (w[j].pop() * a);
			a *= 100;
		}
		else
			if (w[j].top() > 99 && w[j].top() < 123)
			{
				x += (w[j].pop() * a);
				a *= 1000;
			}
	}
	return x;

}

int CalcPOLIZ(Stack* p, int n) 
{
	Stack Calc;
	int i;
	int x, y;
	int z;
	for (i = 0; !p[i].empty();)
	{
		while (Digit(p[i].top()) || Digit1(p[i].top()))
		{
			if (Digit(p[i].top()))
			{
				Calc.push(chislo(p, i, n));
			}
			else
				if (Digit1(p[i].top()))
				{
					Calc.push(chislochar(p, i, n));
				}
			i++;
		}
		if (!p[i].empty())
		{
			y = Calc.pop();
			x = Calc.pop();
			switch (p[i].pop())
			{
			case '+': z = x + y; break;
			case '-': z = x - y; break;
			case '*': z = x * y; break;
			case '/': z = x / y; break;
			case '(': puts("nety )"); _getch();
				exit(-1);
			}
			Calc.push(z);
			i++;
		}
	}
	z = Calc.pop();
	return z;
}
int main() {
	char s[80];
	Stack p[80], z[80], w[80];
	int i, j, n, k1 = 0, k2 = 0, im, im1;
	bool c=true;
	setlocale(LC_ALL, "RUS");
	puts("enter form");
	gets_s(s, 80);
	int h = strlen(s);
	for (int i = 0; i < h; i++) 
	{
		if (s[i] == '(') {
			k1++;
			im1 = i;
		}
		else 
			if (s[i] == ')')
		{
			k2++;
			im = i;
		}
	}
		if (k1 != k2 ) {
			c = false;
			cout << "Потерена скобка";
		}
		else
			if (k2 != k1)
			{
				c = false;
				cout << "Потерена скобка";
			}
			else
				if (s[0] == ')' || s[0] == '+' || s[0] == '-' || s[0] == '*' || s[0] == '/')
				{
					c = false;
					cout << "Потерен операнд ";
				}
				else
					if (s[h] == ')' || s[h] == '+' || s[h] == '-' || s[h] == '*' || s[h] == '/')
					{
						c = false;
						cout << "Потерен операнд ";
					}
					
						if (c == true) 
						{
							for (int j = 0; j < h - 1; j++)
							{
								if ((s[j] == '-' || s[j] == '+' || s[j] == '*' || s[j] == '/' || s[j]=='(') && 
								(s[j + 1] == '-' || s[j + 1] == '+' || s[j + 1] == '*' || s[j + 1] == '/' || s[j + 1] == ')' ))
								{
									c = false;
									cout << "Потерен операнд ";
									break;
								}
							}
						}
			if (c == true)
			{
				for (int j = 0; j < h-1; j++) 
				{
					if (((s[j] >= '0' && s[j] <= '9') && s[j + 1] == '(') || (s[j] == ')' && (s[j+1] >= '0' && s[j+1] <= '9')))
					{
						c = false;
						cout << "Потерена операция ";
						break;
					}
				}
			}
			if(c==true)
			{
				n = FormPOLIZ(s, p);
				puts("POLIZ");
				printPOLIZ(p, z, n);
				invert(z, w, n);
				cout << endl << "Ответ: ";
				cout << CalcPOLIZ(w, n);
			}
	return 0;
}