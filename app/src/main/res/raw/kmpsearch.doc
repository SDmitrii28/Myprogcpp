#include <string.h>
#include "iostream"
#include <locale.h>
using namespace std;
//построение префикса
void Prefix_function(char* p, int m, int* tab)// на вход модстрока, длина подстроки и массив куда будем записывать значения
{
    int j = 0, k = -1;//счетчик и нначальное значание
    tab[0] = -1;/// начальное значчение
    while (j < m - 1)//пока j < длины подстроки -1
    {
        while (k >= 0)// пока значение больше нуля
        {
            if (p[j] != p[k])//cравниваем элементы под номерами j и k
            {
                k = tab[k];//изменяем элементы, присваиваим элеемнт массива
            }
            else
                break;//выводим из цикла
        }
        k++;//увличиваем номер счетчика
        j++; // увличиваем номер счетчика
        if (p[j] == p[k])// сравниваем элемнты
        {
            tab[j] = tab[k];//записываем нужное нам значение в массив
        }
        else
            tab[j] = k;
    }
    cout << "Выводим таблицу значений префикса функции";
    for (int t = 0; t < m; t++)
    {
        cout << tab[t] << " ";
    }
    cout << endl;
}
//KMP поиск, поиск подстроки в строке
void KMP_Search(char* s, char* p, int n, int m, int* tab)
{
    int i = 0, j = 0;
    while (j < m)//пока j < длины подстроки
    {
        if (i - j <= n - m)//разница номеров будет меньше или равно разницы длинны строки и подстроки
            if ((j >= 0) && (s[i] != p[j]))
                j = tab[j];//изменяем счетчик по таблице
            else 
            {
                i++; //увеличивае счетчик
                j++; //увеличивае счетчик
            }
        else 
            //если подстроки нет, выводим сообщение
            cout << "Подстрока не найдена";
    }
    //иначе выводим позицию
    cout << "Подстрока найдена и начинается с номера № =  " << i-m;
}

int main() {
    setlocale(LC_ALL, "rus");
    int n, m;
    char s[80] = "I love programming\0";
    char p[20] = "pro\0";
    n = strlen(s);
    m = strlen(p);
    int* tab = new int[m];
    cout << "Строка: ";
    puts(s);
    cout << "Подстрока: ";
    puts(p);
    Prefix_function(p, m, tab); //Построение префикс-функции
    KMP_Search(s, p, n, m, tab); //Поиск подстроки
    return 0;
}