#pragma once
#include <iostream>
#include <cmath>
using namespace std;
template <class T> class Array {
private:
	T* a;
	int n;
	int mem;
	void shiftleft(int pos);// сдвиг влево начиная с позиции pos+1
public:
	Array();
	Array(int, int);
	Array(T* b, int m);
	Array(const Array<T>&);
	Array<T>& operator=(const Array<T>&);
	~Array();
	void scan(int m);
	void print();
	T& operator[](int);
	int findKey(T);// возвращает индекс элемента или -1, если элемента нет
	Array<T>& operator+=(T);
	Array<T> operator+(T);
	Array<T>& operator+=(Array<T>);
	Array<T> operator+(Array<T>);
	Array<T>& operator-=(T);
	Array<T> operator-(T);// b=*this-x
	Array<T>& DelPosEq(int);// возвращает *this
	Array<T>& DelPosNew(int);// возвращает новый массив
	bool operator==(Array<T>);
	bool operator!=(Array<T>);
	int max();//возвращает индекс макс.
	int min();//возвращает  индекс мин.
	void sortShella();
	int razmer();
	template<class T>friend  ostream& operator << (ostream& r, Array<T>& x);
	template<class T>friend  istream& operator >> (istream& r, Array<T>& x);
};
template <class T> Array<T>::Array() {
	a = new T[1];
	n = 1;
	mem = 1;
}
template <class T>Array<T>::Array(int N, int MEM) {
	n = N;
	if (N > MEM) {
		mem = n + 10;
	}
	else
	{
		mem = MEM;
	}
	a = new T[mem];
}
template <class T>Array<T>::Array(T* b, int m) {
	mem = m + 10;

	a = new T[mem];
	for (int i = 0; i < m; i++) {
		a[i] = b[i];
	}
	n = m;
}
template <class T>Array<T>::Array(const Array<T>& x) {
	n = x.n;
	mem = x.mem;

	a = new T[mem];
	for (int i = 0; i < n; i++) {
		a[i] = x.a[i];
	}

}
template <class T> Array<T>& Array<T>::operator=(const Array<T>& x) {
	if (this != &x) {
		delete[]a;
		n = x.n;
		mem = x.mem;
		a = new T[mem];
		for (int i = 0; i < n; i++) {
			a[i] = x.a[i];
		}
	}
	return *this;

}
template <class T>Array<T>::~Array() {
	delete[]a;
}
template <class T> void Array<T>::scan(int m) {
	cout << "Enter " << m << " elements" << endl;
	if (n != m) {
		delete[]a;
		a = new T[mem = m + 10];
		n = m;
	}
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
}
template <class T>void Array<T>::print() {
	for (int i = 0; i < n; i++) {
		cout << a[i] << " ";
	}

}
template <class T>T& Array<T>::operator[](int k) {
	try {
		if (k < 0)
		{
			throw(0);
		}
		if (k >= n) {
			throw("incorrect index");
		}
		return a[k];
	}
	catch (int m) {
		cout << "index < 0";
		return a[m];
	}
	catch (char* s) {
		cout << s;
		return a[n - 1];
	}
	catch (...) {
		cout << "incorrect index";
		return a[0];
	}
}
template <class T>Array<T>& Array<T>::operator+=(T key) {
	int i;
	T*t;
	if (mem > n) {
		a[n] = key;
		n++;
	}
	else
	{
		mem = n + 10;
		t = new T[mem];
		for (i = 0; i < n; i++) {
			t[i] = a[i];
		}
		t[n] = key;
		delete[]a;
		a = t;
		n++;
	}
	return *this;
}
template <class T>Array<T> Array<T>::operator+(T key) {
	Array Res(n + 1, n + 10);
	for (int i = 0; i < n; i++) {
		Res.a[i] = a[i];
	}
	Res.a[n] = key;
	return Res;
}
template <class T> Array<T>& Array<T>::operator+=(Array<T> z) {
	if (mem < n + z.n) {
		mem = n + z.n + 10;
		T* t = new T[mem];
		for (int i = 0; i < n; i++) {
			t[i] = a[i];
		}
		for (int i = 0; i < z.n; i++) {
			t[n + i] = z.a[i];
		}
		delete[]a;
		a = t;
		n = n + z.n;
	}
	else {
		for (int i = n; i < n + z.n; i++) {
			a[i] = z.a[i - n];
		}
		n = n + z.n;
	}
	return *this;
}
template <class T> Array<T> Array<T>::operator+(Array<T> z) {
	Array res(n + z.n, mem + z.mem);
	for (int i = 0; i < n; i++) {
		res.a[i] = a[i];
	}
	for (int i = n; i < n + z.n; i++) {
		res.a[i] = z.a[i - n];
	}
	return res;
}
//template <class T>istream& operator >> (istream& r, Array<T>& x) {
//	x.scan(x.n);
//	return r;
//}
//template <class T>ostream& operator << (ostream& r, Array<T> &x) {
//	for (int i = 0; i < x.n; i++) {
//		r << x.a[i] << " ";
//	}
//	return r;
//
//}
template <class T> ostream& operator << (ostream& r, Array<T>& x) {
	cout << "Your array: ";
	for (int i = 0; i < x.n; i++)
		cout << x.a[i] << ' ';
	cout << "\n";
	return r;
}

template <class T> istream& operator>> (istream& r, Array<T>& x) {
	cout << "enter the number of elements";
	int m;
	cin >> m;
	cout << "enter" << m << "elements: ";
	for (int i = 0; i < m; i++)
		r >> x.a[i];
	return r;
}
//template <class T>istream& operator >> (istream& r, Array<T>& x) {
//	int m;
//	cout << "enter the number of elements:";
//	cin >> m;
//	cout << "enter" << m << "elements";
//	x.n = m;
//	for (int i = 0; i < x.n; i++)
//	{
//		r >> x.a[i];
//	}
//	return r;
//}
template <class T>int Array<T>::findKey(T key) {
	int pos = -1;
	for (int i = 0; i < n; i++) {
		if (this->a[i] == key) {
			pos = i;
			break;
		}
	}
	return pos;
}
template <class T>void Array<T>::shiftleft(int pos) {
	for (int i = pos; i < n - 1; i++) {
		a[i] = a[i + 1];
	}
	n = n - 1;
}
template <class T>Array<T>& Array<T>::operator-=(T key) {
	int i;
	int pos = this->findKey(key);
	if (pos == -1) {
		return *this;
	}
	else
	{
		for (i = pos; i < n - 1; i++) {
			a[i] = a[i + 1];
		}
		n--;
		return *this;
	}
}
template <class T>Array<T> Array<T>::operator-(T key) {
	Array Res(n, mem);
	int pos = this->findKey(key);
	if (pos == -1) {
		return *this;
	}
	else
	{
		for (int i = 0; i < pos; i++) {
			Res.a[i] = a[i];
		}
		for (int i = pos; i < n - 1; i++) {
			Res.a[i] = a[i + 1];
		}
		Res.n = n - 1;
	}
	return Res;
}
template <class T>Array<T>& Array<T>::DelPosEq(int in) {
	if (in >= n || in < 0) {
		return *this;
	}
	else
	{
		for (int i = in; i < n - 1; i++) {
			a[i] = a[i + 1];
		}
		n--;
		return *this;
	}

}
// возвращает *this
template <class T>Array<T>& Array<T>::DelPosNew(int in) {
	Array res(n, mem + 1);
	if (in >= n || in < 0) {
		return *this;
	}
	else
	{
		for (int i = 0; i < in; i++) {
			res.a[i] = a[i];
		}
		for (int i = in; i < n - 1; i++) {
			res.a[i] = a[i + 1];
		}
		res.n = n - 1;

		return res;
	}

}// возвращает новый массив
template <class T>bool Array<T>::operator==(Array<T> s) {
	int c = 0;
	if (n == s.n) {
		for (int i = 0; i < n; i++) {
			if (a[i] == s.a[i]) {
				c++;
			}
		}
	}
	else
		return false;
	if (c == n) {
		return true;
	}
	else
		return false;
}
template <class T>bool Array<T>::operator!=(Array<T> s) {
	int c = 0;
	if (n == s.n) {
		for (int i = 0; i < n; i++) {
			if (a[i] != s.a[i]) {
				c++;
			}
		}
	}
	else
		return true;
	if (c != n) {
		return true;
	}
	else
		return false;

}
template <class T>int Array<T>::max() {
	int imax = 0;
	T max = a[imax];
	for (int i = 0; i < n; i++) {
		if (a[i] > max) {
			max = a[i];
			imax = i;
		}
	}
	return imax;
}//возвращает индекс макс.
template <class T>int Array<T>::min() {
	int imin = 0;
	T min = a[imin];
	for (int i = 0; i < n; i++) {
		if (a[i] < min) {
			min = a[i];
			imin = i;
		}
	}
	return imin;
}//возвращает  индекс мин.
template <class T>void Array<T>::sortShella() {
	int h = n, j;
	T t;
	h = h / 2;
	while (h > 0) {
		for (int i = 0; i < n - h; i++)
		{
			j = i;
			while (j >= 0 && a[j] > a[j + h])
			{
				t = a[j];
				a[j] = a[j + h];
				a[j + h] = t;
				j--;
			}
		}
		h = h / 2;
	}
}
template <class T>int Array<T>::razmer() {
	return n;
}
